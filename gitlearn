$ git add readme.txt 
$ git commit -m "branch test"


#关联远程仓库
$ git remote add origin git@github.com:michaelliao/learngit.git

#把本地库的所有内容推送到远程库上
#加上-u参数，Git不但会把本地的master分支内容推送到远程新的master分支
#还会把本地的master分支和远程的master分支关联起来
$ git push -u origin master

#
git push origin master

#如果远程库已经创建好了，用命令克隆一个本地库
git clone git@github.com:michaelliao/gitskills.git


#创建并切换分支 -b参数
$ git checkout -b dev
#相当于以下两条命令
$ git branch dev
$ git checkout dev

#查看当前分支
$ git branch

#把dev分支的成果合并到master分支上
$ git merge dev

#删除分支
$ git branch -d dev

#用git log --graph命令可以看到分支合并图
$ git log --graph --pretty=oneline --abbrev-commit

#通常git会用“Fast forward”模式，删除分支后，会丢掉分支信息
#如果要禁用“Fast forward”模式，git就会在merge时声称一个新的commit，这样，从分支历史上就可以看出分支信息
$ git merge --no-ff -m "merge with no-ff" dev
$ git log --graph --pretty=oneline --abbrev-commit

#---------------------------------bug分支--------------------------------
#修复bug时，通过创建新的bug分支进行修复，然后合并，最后删除
#当手头没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，在git stash pop，回到工作现场
$ git stash
$ ...
$ git stash pop
#或者用git stash apply恢复，stash内容并不删除，需要使用git stash drop来删除
$ git stash list
$ git stash apply
$ git stash drop


#---------------------------------feature分支-----------------------------
#开发一个新的feature，最好新建一个分支git checkout -b name
#如果要丢弃一个没有被合并过的分支，可以通过git branch -D name强行删除

#创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev

#查看远程库信息，使用git remote -v
$ git remote -v

#本地新建的分支如果不推送到远程，对其他人就是不可见的

#git pull失败了提示"no tracking information"，没有指定本地分支dev与远程origin/dev分支的链接
$ git push origin dev
$ git branch --set-upstream-to=origin/dev dev
$ git branch --set-upstream dev origin/dev  #despa
$ git pull

#---------------------------------标签管理--------------------------------
#
$git branch

#---------------------------------远程库操作--------------------------------
#添加一个远程库 新建一个远程库，并命名为upstream
git remote add upstream git://github.com/octocat/Spoon-Knife.git
#从远程库获取代码
git fetch upstream
#合并到当前开发分支
git merge upstream/master
#将本地更新Push到远程库
#将本地master上传到upstream
git push upstream master
#删除名为upstream的远程库
git remote rm upstream

